#!/usr/bin/env python
import rospy
from drone_controller import BasicDroneController
from geometry_msgs.msg import PoseStamped
from std_msgs.msg import Empty       	 # for land/takeoff/emergency
from ardrone_autonomy.msg import Navdata # for receiving navdata feedback
from drone_status import DroneStatus
import time

t = str(time.time())
print 'time %s'%t
f = open('/home/fdsa/%s.txt'%t,'w')
lastpose = [0,0,0,0,0,0,0]
pose = [0,0,0,0,0,0,0]
status = -1
hoverPose = [-1000, 1000, 1000]
StatusMessages = {
        -1 : 'error',
        0 : 'Emergency',
        1    : 'Initialized',
        2    : 'Landed',
        3    : 'Flying',
        4  : 'Hovering',
        5      : 'Test (?)',
        6 : 'Taking Off',
        7 : 'Going to Hover Mode',
        8   : 'Landing',
        9   : 'Looping (?)'
        }

def pctrl(e):
    output = -e / 2000.0
    sat = 0.1
    if output > sat:
        output = sat
    if output < -sat:
        output = -sat
    return output

def vrpn_callback(data):
    lastpose = pose
    pose[0] = data.pose.position.x * 1000
    pose[1] = data.pose.position.y * 1000
    pose[2] = data.pose.position.z * 1000
    pose[3] = data.pose.orientation.x
    pose[4] = data.pose.orientation.y
    pose[5] = data.pose.orientation.z
    pose[6] = data.pose.orientation.w
    ex = pose[0] - hoverPose[0]
    ey = pose[2] - hoverPose[2]
    controller.SetCommand(pctrl(ex), pctrl(ey), 0, 0)
    f.writelines('%s, %f, %f\n'%(str(pose),pctrl(ex),pctrl(ey)))
    print 'status:%s,rc_rpy:%.3f,%.3f'%(StatusMessages[status],pctrl(ex),pctrl(ey))


def navdata_callback(data):
    status = int(data.state)
    if status == 0:
        controller.SendEmergency()
    #print status

def onClose():
    f.close()


if __name__ == '__main__':
    rospy.init_node('ardrone_ctrl', anonymous=True)
    rospy.Subscriber("/vrpn_client_node/drone1/pose", PoseStamped, vrpn_callback)
    rospy.Subscriber('/ardrone/navdata',Navdata,navdata_callback)
    rospy.on_shutdown(onClose)
    #rospy.Timer(rospy.Duration(0.1),timer_callback)
    controller = BasicDroneController()
    rospy.sleep(2.)
    print 'TAKEOFF'
    controller.SendTakeoff()
    rospy.sleep(2.)
    rospy.spin()
